name: Beekeeper

on:
  repository_dispatch:
    types: [trigger-beekeeper]
  pull_request:
    types: [ready_for_review]

jobs:
  beekeeper:
    env:
      REPLICA: 3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install bee-local
        run: |
          sudo mv $(command -v brew){,_disable}
          export URL=$(curl -s https://api.github.com/repos/ethersphere/bee-local/releases/latest | jq -r .tarball_url)
          curl -Ls ${URL} -o bee-local.tar.gz
          tar --strip-components=1 --wildcards -xzf bee-local.tar.gz ethersphere-bee-local-*/{beeinfra.sh,helm-values,hack}
      - name: Install latest beekeeper
        run: |
          export TAG=$(curl -s https://api.github.com/repos/ethersphere/beekeeper/releases/latest | jq -r .tag_name)
          curl -Ls https://github.com/ethersphere/beekeeper/releases/download/${TAG}/beekeeper-linux-amd64 -o beekeeper
          chmod +x beekeeper
      - name: Prepare testing cluster (DNS discovery)
        run: |
          ./beeinfra.sh prepare --dns-disco --geth
      - name: Set kube config
        run: |
          mkdir -p ~/.kube
          cp $(k3d get-kubeconfig --name='k3s-default') ~/.kube/config
          echo "kubeconfig: ${HOME}/.kube/config" > ~/.beekeeper.yaml
      - name: Set testing cluster (DNS discovery)
        run: |
          echo -e "127.0.0.10\tregistry.localhost" | sudo tee -a /etc/hosts
          for ((i=0; i<REPLICA; i++)); do echo -e "127.0.1.$((i+1))\tbee-${i}.localhost bee-${i}-debug.localhost"; done | sudo tee -a /etc/hosts
          ./beeinfra.sh install --dns-disco --local -r "${REPLICA}" --bootnode /dnsaddr/localhost --geth
      - name: Test fullconnectivity
        id: fullconnectivity-1
        run: ./beekeeper check fullconnectivity --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pingpong
        id: pingpong-1
        run: ./beekeeper check pingpong --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test settlements
        id: settlements-1
        run: ./beekeeper check settlements --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" -t 100000
      - name: Test pushsync (bytes)
        id: pushsync-bytes-1
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      - name: Test pushsync (chunks)
        id: pushsync-chunks-1
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3 --upload-chunks
      - name: Test retrieval
        id: retrieval-1
        run: ./beekeeper check retrieval --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      # - name: Test chunkrepair
      #   id: chunkrepair-1
      #   run: ./beekeeper check chunkrepair --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test manifest
        id: manifest-1
        run: ./beekeeper check manifest --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test gc
        id: gc-chunk-1
        run: ./beekeeper check gc --db-capacity 2000 --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pin chunk
        id: pin-chunk-1
        run: ./beekeeper check pin-chunk --db-capacity 2000 --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pin bytes
        id: pin-bytes-1
        run: ./beekeeper check pin-bytes --db-capacity 2000 --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pin remote chunks
        id: pin-remote-1
        run: ./beekeeper check pin-remote --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Destroy the cluster
        run: |
          ./beeinfra.sh destroy
      - name: Prepare testing cluster (Node connection and clef enabled)
        run: |
          ./beeinfra.sh prepare --geth --clef
      - name: Set kube config
        run: |
          mkdir -p ~/.kube
          cp $(k3d get-kubeconfig --name='k3s-default') ~/.kube/config
      - name: Set testing cluster (Node connection and clef enabled)
        run: |
          ./beeinfra.sh install --local -r "${REPLICA}" --geth --clef
      - name: Test fullconnectivity
        id: fullconnectivity-2
        run: ./beekeeper check fullconnectivity --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pingpong
        id: pingpong-2
        run: ./beekeeper check pingpong --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test settlements
        id: settlements-2
        run: ./beekeeper check settlements --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" -t 100000
      - name: Test pushsync (bytes)
        id: pushsync-bytes-2
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      - name: Test pushsync (chunks)
        id: pushsync-chunks-2
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3 --upload-chunks
      - name: Test retrieval
        id: retrieval-2
        run: ./beekeeper check retrieval --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      # - name: Test chunkrepair
      #   id: chunkrepair-2
      #   run: ./beekeeper check chunkrepair --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Retag Docker image and push
        if: github.ref == 'refs/heads/master' && success()
        run: |
          docker tag registry.localhost:5000/ethersphere/bee:latest ethersphere/bee:latest
          printf ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ethersphere/bee:latest
      - name: Set IMAGE_DIGEST variable
        if: github.ref == 'refs/heads/master' && success()
        run: echo "IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ethersphere/bee:latest | cut -d'@' -f 2 | tr -d '\n')" >> $GITHUB_ENV
      - name: Trigger ArgoCD
        if: github.ref == 'refs/heads/master' && success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_GHA_PAT }}
          repository: ethersphere/bee-argo
          event-type: trigger-argo
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "digest": "${{ env.IMAGE_DIGEST }}"}'
      - name: Debug workflow if failed
        if: failure()
        run: |
          export FAILED='no-test'
          if ${{ steps.fullconnectivity-1.outcome=='failure' }}; then FAILED=fullconnectivity-1; fi
          if ${{ steps.pingpong-1.outcome=='failure' }}; then FAILED=pingpong-1; fi
          if ${{ steps.settlements-1.outcome=='failure' }}; then FAILED=settlements-1; fi
          if ${{ steps.pushsync-bytes-1.outcome=='failure' }}; then FAILED=pushsync-bytes-1; fi
          if ${{ steps.pushsync-chunks-1.outcome=='failure' }}; then FAILED=pushsync-chunks-1; fi
          if ${{ steps.retrieval-1.outcome=='failure' }}; then FAILED=retrieval-1; fi
          # if ${{ steps.chunkrepair-1.outcome=='failure' }}; then FAILED=chunkrepair-1; fi
          if ${{ steps.manifest-1.outcome=='failure' }}; then FAILED=manifest-1; fi
          if ${{ steps.gc-chunk-1.outcome=='failure' }}; then FAILED=gc-chunk-1; fi
          if ${{ steps.pin-chunk-1.outcome=='failure' }}; then FAILED=pin-chunk-1; fi
          if ${{ steps.pin-bytes-1.outcome=='failure' }}; then FAILED=pin-bytes-1; fi
          if ${{ steps.pin-remote-1.outcome=='failure' }}; then FAILED=pin-remote-1; fi
          if ${{ steps.fullconnectivity-2.outcome=='failure' }}; then FAILED=fullconnectivity-2; fi
          if ${{ steps.pingpong-2.outcome=='failure' }}; then FAILED=pingpong-2; fi
          if ${{ steps.settlements-2.outcome=='failure' }}; then FAILED=settlements-2; fi
          if ${{ steps.pushsync-bytes-2.outcome=='failure' }}; then FAILED=pushsync-bytes-2; fi
          if ${{ steps.pushsync-chunks-2.outcome=='failure' }}; then FAILED=pushsync-chunks-2; fi
          if ${{ steps.retrieval-2.outcome=='failure' }}; then FAILED=retrieval-2; fi
          # if ${{ steps.chunkrepair-2.outcome=='failure' }}; then FAILED=chunkrepair-2; fi
          KEYS=$(curl -sSf -X POST https://eu.relay.tunshell.com/api/sessions)
          curl -sSf -X POST -H "Content-Type: application/json" -d "{\"text\": \"**Merge run**\nFailed -> \`${FAILED}\`\nDebug -> \`sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} eu.relay.tunshell.com\`\"}" https://beehive.ethswarm.org/hooks/${{ secrets.WEBHOOK_KEY }}
          echo "Failed test: ${FAILED}"
          echo "Connect to github actions node using"
          echo "sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} eu.relay.tunshell.com"
          curl -sSf https://lets.tunshell.com/init.sh | sh /dev/stdin T $(echo $KEYS | jq -r .peer1_key) ${{ secrets.TUNSHELL_SECRET }} eu.relay.tunshell.com
