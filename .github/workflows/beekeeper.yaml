name: Beekeeper

on:
  repository_dispatch:
    types: [trigger-beekeeper]

jobs:
  beekeeper:
    env:
      REPLICA: 3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install bee-local
        run: |
          export URL=$(curl -s https://api.github.com/repos/ethersphere/bee-local/releases/latest | jq -r .tarball_url)
          curl -Ls ${URL} -o bee-local.tar.gz
          tar --strip-components=1 --wildcards -xzf bee-local.tar.gz ethersphere-bee-local-*/{beeinfra.sh,helm-values,hack}
      - name: Install latest beekeeper
        run: |
          export TAG=$(curl -s https://api.github.com/repos/ethersphere/beekeeper/releases/latest | jq -r .tag_name)
          curl -Ls https://github.com/ethersphere/beekeeper/releases/download/${TAG}/beekeeper-linux-amd64 -o beekeeper
          chmod +x beekeeper
      - name: Set testing cluster (DNS discovery)
        run: |
          echo -e "127.0.0.10\tregistry.localhost" | sudo tee -a /etc/hosts
          for ((i=0; i<REPLICA; i++)); do echo -e "127.0.1.$((i+1))\tbee-${i}.localhost bee-${i}-debug.localhost"; done | sudo tee -a /etc/hosts
          ./beeinfra.sh install --dns-disco --local -r "${REPLICA}" --bootnode /dnsaddr/localhost
      - name: Set kube config
        run: |
          mkdir -p ~/.kube
          cp $(k3d get-kubeconfig --name='k3s-default') ~/.kube/config
      - name: Test fullconnectivity
        run: ./beekeeper check fullconnectivity --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pingpong
        run: ./beekeeper check pingpong --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Clean the cluster
        run: |
          helm uninstall bee -n bee
      - name: Set testing cluster (Node connection)
        run: ./beeinfra.sh install --local -r "${REPLICA}"
      - name: Test fullconnectivity
        run: ./beekeeper check fullconnectivity --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test pingpong
        run: ./beekeeper check pingpong --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test balances
        run: ./beekeeper check balances --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}"
      - name: Test pushsync (bytes)
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      - name: Test pushsync (chunks)
        run: ./beekeeper check pushsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3 --upload-chunks
      - name: Test retrieval
        run: ./beekeeper check retrieval --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      - name: Test pullsync
        run: ./beekeeper check pullsync --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}" --upload-node-count "${REPLICA}" --chunks-per-node 3
      - name: Test chunkrepair
        run: ./beekeeper check chunkrepair --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test manifest
        run: ./beekeeper check manifest --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Clean the cluster
        run: |
          helm uninstall bee -n bee
          grep -vE 'bee|registry.localhost' /etc/hosts | sudo tee /etc/hosts
      - name: Increase REPLICA to 5
        run: |
          echo "::set-env name=REPLICA::5"
      - name: Set testing cluster (Node connection) 5 bee nodes
        run: |
          echo -e "127.0.0.10\tregistry.localhost" | sudo tee -a /etc/hosts
          for ((i=0; i<REPLICA; i++)); do echo -e "127.0.1.$((i+1))\tbee-${i}.localhost bee-${i}-debug.localhost"; done | sudo tee -a /etc/hosts
          ./beeinfra.sh install --local -r "${REPLICA}"
      - name: Test localpinning 1
        run: ./beekeeper check localpinning --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"
      - name: Test localpinning 2
        run: ./beekeeper check localpinning --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"  --large-file-disk-ratio 2
      - name: Test localpinning 3
        run: ./beekeeper check localpinning --api-scheme http --debug-api-scheme http --disable-namespace --debug-api-domain localhost --api-domain localhost --node-count "${REPLICA}"  --large-file-disk-ratio 2 --large-file-count 10
      - name: Retag Docker image and push
        if: success()
        run: |
          docker tag registry.localhost:5000/ethersphere/bee:latest ethersphere/bee:latest
          printf ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ethersphere/bee:latest
      - name: Set IMAGE_DIGEST variable
        if: success()
        run: echo "::set-env name=IMAGE_DIGEST::$(docker inspect --format='{{index .RepoDigests 0}}' ethersphere/bee:latest | cut -d'@' -f 2 | tr -d '\n')"
      - name: Trigger ArgoCD
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_GHA_PAT }}
          repository: ethersphere/bee-argo
          event-type: trigger-argo
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "digest": "${{ env.IMAGE_DIGEST }}"}'
      - name: Debug workflow if failed
        if: failure()
        run: |
          KEYS=$(curl -sSf -X POST https://eu.relay.tunshell.com/api/sessions)
          echo "Connect to github actions node using"
          echo "sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) {TUNSHELL_SECRET} eu.relay.tunshell.com"
          curl -sSf https://lets.tunshell.com/init.sh | sh /dev/stdin T $(echo $KEYS | jq -r .peer1_key) ${{ secrets.TUNSHELL_SECRET }} eu.relay.tunshell.com
