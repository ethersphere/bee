name: Go

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: [1.17]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}
    - name: Set git to use LF
      # make sure that line endings are not converted on windows
      # as gofmt linter will report that they need to be changed
      run: git config --global core.autocrlf false
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Commit linting
      if: matrix.os == 'ubuntu-latest' && github.ref != 'refs/heads/master'
      uses: wagoid/commitlint-github-action@v2
    - name: Cache Go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: Run tests using the performance cpu scaling governor
      if: matrix.os == 'ubuntu-latest'
      run: echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    - name: Build
      run: make build
    - name: Lint
      if: matrix.os == 'ubuntu-latest'
      run: make lint
    - name: Vet
      if: matrix.os == 'ubuntu-latest'
      run: make vet
    - name: Test with race detector & code coverage
      if: matrix.os == 'ubuntu-latest'
      # only generate code coverage profile on ubuntu
      run: make cover=1 test-race
    - name: Test with race detector
      if: matrix.os != 'ubuntu-latest'
      run: make test-race
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        files: ./cover.out   
    - name: Trigger Beekeeper
      if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest' && success()
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_GHA_PAT }}
        repository: ${{ github.repository }}
        event-type: trigger-beekeeper
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
    - name: Debug workflow if failed
      if: failure() && matrix.os == 'ubuntu-latest'
      run: |
          KEYS=$(curl -sSf -X POST https://eu.relay.tunshell.com/api/sessions)
          curl -sSf -X POST -H "Content-Type: application/json" -d "{\"text\": \"**${RUN_TYPE}** Beekeeper Error\nBranch: \`${{ github.head_ref }}\`\nUser: @${{ github.event.pull_request.user.login }}\nDebugging artifacts: [click](https://$BUCKET_NAME.$AWS_ENDPOINT/artifacts_$VERTAG.tar.gz)\nStep failed: \`${FAILED}\`\nDebug shell: \`sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} eu.relay.tunshell.com\`\"}" https://beehive.ethswarm.org/hooks/${{ secrets.WEBHOOK_KEY }}
          echo "sh <(curl -sSf https://lets.tunshell.com/init.sh) L $(echo $KEYS | jq -r .peer2_key) \${TUNSHELL_SECRET} eu.relay.tunshell.com"
          curl -sSf https://lets.tunshell.com/init.sh | sh /dev/stdin T $(echo $KEYS | jq -r .peer1_key) ${{ secrets.TUNSHELL_SECRET }} eu.relay.tunshell.com